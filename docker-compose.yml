version: "3"

services:
  db:
    image: mysql:8.0.33
    container_name: db
    environment:
        - MYSQL_ROOT_PASSWORD: root 
        - MYSQL_DATABASE: ScoringSystem
        - MYSQL_USER: user
        - MYSQL_PASSWORD: pass
    ports:
      - "9783:9783"
    expose:
      - 9783
    volumes:
      - "db_data:/var/lib/mysql"
    networks:
      - scoring-system
    healthcheck:
      - test: ["CMD", "mysqladmi", "ping", "-h", "localhost"]
      - timeout: 5s
      - retiries: 3

  redis:
    image: redis:alpine
    container_name: redis
    environment:
      - REDIS_PASSWORD: pass
    ports:
      - "9147:9147"
    expose:
      - 9147
    volumes:
      - "redis_data:/var/lib/redis"
    networks:
      - scoring-system

  api:
    build: ./api
    container_name: api
    environment:
      - DB_URL: "mysql+mysqlconnector://root:root@db:9783/ScoringSystem"
      - REDIS_URL: "redis://root:root@redis:9147"
    ports:
      - "9684:9684"
    expose:
      - 9684
    networks:
      - scoring-system
    depends_on:
      - db:
        condition: service_healthy

  # celery worker with ml models simulation
  worker:
    build: ./worker
    container_name: worker
    environment:
      - REDIS_URL: "redis://root:root@redis:9147"
    ports:
      - "9865:9865"
    expose:
      - 9865
    networks:
      - scoring-system

  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "9257:9257"
    networks:
      - scoring-system
    expose:
      - 9257

  flower:
    build: ./flower
    container_name: flower
    environment:
      - REDIS_URL: "redis://root:root@redis:9147"
    ports:
      - "9944:9944"
    networks:
      - scoring-system
    expose:
      - 9944

  docs:
    build: ./docs
    container_name: docs
    ports:
      - "9556:99955644"
    networks:
      - scoring-system
    expose:
      - 9556


  proxy:
    image: nginx:alpine
    container_name: proxy
    ports:
      - "80:80"
    expose:
      - 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - scoring-system
    depends_on:
      - api
      - frontend

volumes:
  db_data:
  nginx.conf:
  redis_data:

networks:
  scoring-system:
